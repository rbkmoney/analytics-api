[

    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/anapi/console.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => {file, "/var/log/anapi/access_log.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {anapi, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {reporter_url_lifetime, 60}, % seconds
        {service_type, real},
        {access_conf, #{
            jwt => #{
                signee => anapi,
                keyset => #{
                    anapi     => {pem_file, "var/keys/anapi/private.pem"}
                }
            },
            access => #{
                service_name => <<"common-api">>,
                resource_hierarchy => #{
                    invoices => #{},
                    payments => #{},
                    party => #{}
                }
            }
        }},
        {swagger_handler_opts, #{
            validation_opts => #{
                schema => #{
                    response => mild
                }
            }
        }},
        {health_checkers, [
            {erl_health, disk     , ["/", 99]   },
            {erl_health, cg_memory, [99]        },
            {erl_health, service  , [<<"anapi">>]}
        ]},
        {max_deadline, 60000} % milliseconds
    ]},

    {anapi_woody_client, [
        {service_urls, #{
            merchant_stat       => "http://magista:8022/stat"
        }},
        {service_deadlines, #{}},
        {service_retries, #{
            % function => retry strategy
            % '_' work as "any"
            % default value is 'finish'
            % for more info look genlib_retry :: strategy()
            % https://github.com/rbkmoney/genlib/blob/master/src/genlib_retry.erl#L19
        }}
    ]},

    {how_are_you, [
        {metrics_publishers, [
            % {hay_statsd_publisher, #{
            %     key_prefix => <<"anapi.">>,
            %     host => "localhost",
            %     port => 8125
            % }}
        ]}
    ]}
].
