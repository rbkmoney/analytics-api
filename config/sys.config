[

    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/capi/console.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => {file, "/var/log/capi/access_log.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {capi, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {reporter_url_lifetime, 60}, % seconds
        {service_type, real},
        {authorizers, #{
            jwt => #{
                signee => capi,
                keyset => #{
                    capi     => {pem_file, "var/keys/capi/private.pem"}
                }
            }
        }},
        {swagger_handler_opts, #{
            validation_opts => #{
                schema => #{
                    response => mild
                }
            }
        }},
        {health_checkers, [
            {erl_health, disk     , ["/", 99]   },
            {erl_health, cg_memory, [99]        },
            {erl_health, service  , [<<"capi">>]}
        ]},
        {max_deadline, 60000} % milliseconds
    ]},

    {capi_woody_client, [
        {service_urls, #{
            party_management    => "http://hellgate:8022/v1/processing/partymgmt",
            customer_management => "http://hellgate:8022/v1/processing/customer_management",
            accounter           => "http://shumway:8022/accounter",
            invoicing           => "http://hellgate:8022/v1/processing/invoicing",
            invoice_templating  => "http://hellgate:8022/v1/processing/invoice_templating",
            webhook_manager     => "http://hooker:8022/hook",
            cds_storage         => "http://cds:8022/v1/storage",
            merchant_stat       => "http://magista:8022/stat",
            reporting           => "http://reporter:8022/reports",
            geo_ip_service      => "http://columbus:8022/repo",
            payment_tool_provider_apple_pay => "http://adapter-appepay:8022/provider/apple",
            payment_tool_provider_google_pay => "http://adapter-goolepay:8022/provider/google",
            binbase             => "http://binbase:8022/v1/binbase",
            bender              => "http://bender:8022/v1/bender"
        }},
        {service_deadlines, #{
            party_management    => 5000, % milliseconds
            customer_management => 10000
        }},
        {service_retries, #{
            party_management    => #{
            % function => retry strategy
            % '_' work as "any"
            % default value is 'finish'
            % for more info look genlib_retry :: strategy()
            % https://github.com/rbkmoney/genlib/blob/master/src/genlib_retry.erl#L19
                'Get'   => {linear, 3, 1000},
                '_'     => finish
            }
        }}
    ]},

    {dmt_client, [
        {cache_update_interval, 30000}, % milliseconds
        {max_cache_size, #{
            elements => 20,
            memory => 52428800 % 50Mb
        }},
        {service_urls, #{
            'Repository'       => <<"dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    {how_are_you, [
        {metrics_publishers, [
            % {hay_statsd_publisher, #{
            %     key_prefix => <<"capi-v3.">>,
            %     host => "localhost",
            %     port => 8125
            % }}
        ]}
    ]}
].
